When would you want to use a remote repository rather than keeping all your work local?
  
    I'll want to use remote repository, When collaborating with other people working on same project, or when making the project
    open-source to let other people experimenting or use the project as they want, or if we want to
    host our project on the internet.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

    I might want to always pull changes manually because if Git does everything automatically, then everytime
    local resository and GitHub repository will have same commits history which sometimes user would not want. By manually 
    doing it will give the user more flexibility.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    Cloning from one GitHub repository to the GitHub's server is called fork.
    clones is something like, cloning the local Git repository to the computer locally or
    cloning the GitHub repository to the computer machine.
    Branch is simply a label which will remember the history of commits.
    I'll use the suitable from all depending on the situation.

What is the benefit of having a copy of the last known state of the remote stored locally?

    Having a copy of last known state of the remote stored locally is that even we've out from internet access for
    sometime and made a few commits locally, now we can still differentiate the changes even without internet access.
    Meantime, if someone updated the remote on GitHub, and you gain internet access, you can now fetch and merge
    it with the local repository to stay in sync.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    I would've collaborate by sharing the whole project via Google Drive or Dropbox or Onedrive as they'll be
    the only options left what I know today, if there are other platforms for sharing projects, I definitely
    don't know about that. I can't think anything easier than Git or GitHub but even Git and GitHub are not that much
    easy nor that much difficult. I think practicing it will make me more capable of handling these platforms.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

    master branch is generally a main branch and the code/commits within it should work well in any situations.
    So if we're trying out completely a new feature, there might be chances of that feature not working as expected
    or error/bug comes out from it and those should not be included in the main master branch.
    Thus, to prevent our master branch from being interleaved with not working commits, we should make all new commits
    which would be the part of completely new feature or if we are doing some experimental changes which we'll
    think about whether to include this in main project later on or when we want other people to be incorporated in
    some changes within the new feature, in such cases I would like to make changes in a separate branch rather than
    directly in master. Since we are not mixing up the master branch with redundant or non working code, we
    can save our master branch from being not working properly.

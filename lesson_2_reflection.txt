What happens when you initialize a repository? Why do you need to do it?

	It creates an git repository named .git which is hidden in most of the file explorer.
Before starting to commit, we need this repository to store our verisons as commits.
This repository will be having all the commits regarding the directory and subdirectories of this directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	From the working directory, you can select what files you want to add to be commited.
Git offers Staging area, in which we can add files one after another which we want to commit,
and from this Staging area, git will make a commit to the repository(meaning, of all files).

How can you use the staging area to make sure you have one commit per logical
change?

	We have a control to add as many files we want in the staging area one at a time,
and now we can use git commit command to commit all these files that are in Staging are together in the repository
to ensure we have 1 commit per logical change and with commit command, we can also add a short message.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when we want to add any new experimental feature and which shouldn't make any
bad impact on our existing commits and we may want to checkout more than 1 experimental features on the basis of
our actual project/commit.
Branches help us by letting us make the different branch through the current master commit, in other words,
it goes from 1 commit to more than 1 commits of experimental features. We can name the branch and checkout the same wasy we
get to used for checking out the commits.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
